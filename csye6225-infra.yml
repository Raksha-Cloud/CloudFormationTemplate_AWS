#Cloud formation template format version
AWSTemplateFormatVersion: "2010-09-09"

#Cloud formation template description
Description: Creating cloud formation template that can be used to set up required networking resources such as VPC, Internet Gateway and Route Tables.

#Values to pass to your template at runtime (when you create or update a stack)
Parameters:
  VpcCidrBlock:
    Type: String
    Description: IP Range for Virtual Private Cloud
    Default: "10.1.1.0/24"
  subnet1CidrBlock:
    Type: String
    Description: IP range for the Subnet 1
    Default: "10.1.1.0/24"
  subnet2CidrBlock:
    Type: String
    Description: IP range for the Subnet 2
    Default: "10.1.2.0/24"
  subnet3CidrBlock:
    Type: String
    Description: IP range for the Subnet 3
    Default: "10.1.3.0/24"
  AmiID:
    Description: "Amazon Machine Image ID"
    Type: String
    Default: "ami-08c40ec9ead489470"
  EC2InstanceType:
    Default: t2.micro
    Type: String
    Description: "Application Instance EC2Instance"
    AllowedValues: [t2.micro]
    ConstraintDescription : "only t2.micro type of instance allowed"

#Specifies the stack resources and their properties, such as an Amazon Elastic Compute Cloud instance

Resources:
  #creating my vpc
  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"
      InstanceTenancy: "default"
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  # creating Subnet 1:
  PublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: !Ref subnet1CidrBlock
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Public Subnet-1

  # creating Subnet 2:
  PublicSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: !Ref subnet2CidrBlock
      AvailabilityZone: !Select [1, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Public Subnet-2

  # creating Subnet 3:
  PublicSubnetThree:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: !Ref subnet3CidrBlock
      AvailabilityZone: !Select [2, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Public Subnet-3

  #setting up the Internet Gateway for myVPC
  InternetGatewayBlock:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Internet-Gateway

  #To attach the InternetGateway with myVPC created above
  InternetGatewayAttach:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGatewayBlock
      VpcId: !Ref myVPC

  # Routing Table:
  PublicRoutingTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Public Routing Table

  # Route in routingTable
  PublicDefaultRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttach
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGatewayBlock
      RouteTableId: !Ref PublicRoutingTable

  #Attaching Public subnet 1 to the Public Routing Table
  PublicSubnet1RouteTableAttach:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRoutingTable
      SubnetId: !Ref PublicSubnetOne

  #Attaching Public subnet 2 to the Public Routing Table
  PublicSubnet2RouteTableAttach:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRoutingTable
      SubnetId: !Ref PublicSubnetTwo

  #Attaching Public subnet 3 to the Public Routing Table
  PublicSubnet3RouteTableAAttach:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRoutingTable
      SubnetId: !Ref PublicSubnetThree

  Ec2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "ApplicationSecurityGroup"
      GroupDescription: "Application Security Group to enable SSH access via port 22,80,443 and 3300"
      VpcId: !Ref myVPC
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22

        - CidrIp: 0.0.0.0/0
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80

        - CidrIp: 0.0.0.0/0
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443

        - CidrIp: 0.0.0.0/0
          FromPort: 3300
          IpProtocol: tcp
          ToPort: 3300

      Tags: 
        - Key: Name
          Value: !Sub ${AWS::StackName}-Ec2SecurityGroup

  Ec2AppInstance:
    Type: "AWS::EC2::Instance"
    Properties:
      InstanceType: !Ref EC2InstanceType
      SecurityGroupIds: 
        - !Ref Ec2SecurityGroup
      KeyName: aws
      ImageId: !Ref AmiID
      SubnetId: !Ref PublicSubnetOne
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeType: gp2
            DeleteOnTermination: true
            VolumeSize: 50
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Ec2Instance

  # To display the outputs of the resources created during the could formation after building the stack
Outputs:
  VpcId:
    Description: My VPC ID
    Value: !Ref myVPC
    Export:
      Name: !Sub ${AWS::StackName}-VPC

  PublicSubnets:
    Description: List of all the public subnets created
    Value:
      !Join [
        ",",
        [!Ref PublicSubnetOne, !Ref PublicSubnetTwo, !Ref PublicSubnetThree],
      ]

  PublicSubnet1:
    Description: Public Subnet 1
    Value: !Ref PublicSubnetOne
    Export:
      Name: !Sub ${AWS::StackName}-Public-Subnet-1

  PublicSubnet2:
    Description: Public Subnet 2
    Value: !Ref PublicSubnetTwo
    Export:
      Name: !Sub ${AWS::StackName}-Public-Subnet-2

  PublicSubnet3:
    Description: Public Subnet 3
    Value: !Ref PublicSubnetThree
    Export:
      Name: !Sub ${AWS::StackName}-Public-Subnet-3
