#Cloud formation template format version
AWSTemplateFormatVersion: "2010-09-09"

#Cloud formation template description
Description: Creating cloud formation template that can be used to set up required networking resources such as VPC, Internet Gateway and Route Tables.

#Values to pass to your template at runtime (when you create or update a stack)
Parameters:
  VpcCidrBlock:
    Type: String
    Description: IP Range for Virtual Private Cloud
    Default: "10.0.0.0/16"
  subnet1CidrBlock:
    Type: String
    Description: IP range for the Public Subnet 1
    Default: "10.0.1.0/24"
  subnet2CidrBlock:
    Type: String
    Description: IP range for the public Subnet 2
    Default: "10.0.2.0/24"
  subnet3CidrBlock:
    Type: String
    Description: IP range for the public Subnet 3
    Default: "10.0.3.0/24"
  PrivateSubnet1CidrBlock:
    Type: String
    Description: IP range for the private Subnet 1
    Default: "10.0.148.0/18"
  PrivateSubnet2CidrBlock:
    Type: String
    Description: IP range for the private Subnet 2
    Default: "10.0.149.0/24"
  PrivateSubnet3CidrBlock:
    Type: String
    Description: IP range for the private Subnet 3
    Default: "10.0.150.0/24"
  AmiID:
    Description: "Amazon Machine Image ID"
    Type: String
    Default: "ami-08c40ec9ead489470"
  EC2InstanceType:
    Default: t2.micro
    Type: String
    Description: "Application Instance EC2Instance"
    AllowedValues: [t2.micro]
    ConstraintDescription: "only t2.micro type of instance allowed"
  EnvName:
    Type: String
    Description: "Environment Name"
    Default: "demo"
    AllowedValues:
      - dev
      - demo
  DBName:
    Type: String
    Default: "csye6225"
    Description: "Database Name"
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: Should begin with a letter and contain only alphanumeric characters
    MaxLength: 60
    MinLength: 1
  DBUserName:
    Type: String
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: Should begin with a letter and contain only alphanumeric characters
    MaxLength: 16
    MinLength: 1
    Default: "csye6225"
    Description: "DB username"
  DBPassword:
    Type: String
    Default: "csye6225Admin"
    Description: "parameter for DB Password"
    AllowedPattern: "[a-zA-Z0-9]*"
    ConstraintDescription: Should begin with a letter and contain only alphanumeric characters
    MaxLength: 41
    MinLength: 8
  DBBackupDays:
    Default: 0
    MaxValue: 1
    MinValue: 0
    Type: Number
  DBInstanceType:
    AllowedValues:
      - db.t3.micro
    Default: db.t3.micro
    Type: String
  DBInstanceIdentifierName:
    Type: String
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: Must begin with a letter and contain only alphanumeric characters
    Default: "csye6225"
    Description: "parameter for DB Instance Identifier Name"
  SSLCertId:
     Type: String
     Default: "95072eb3-1254-403b-9711-6d9b138facd6"
     Description: "ACM SSL Certificate Id"
#Specifies the stack resources and their properties, such as an Amazon Elastic Compute Cloud instance

Resources:
  #creating my vpc
  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"
      InstanceTenancy: "default"
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  # creating public Subnet 1:
  PublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: !Select [0, !Cidr [!GetAtt myVPC.CidrBlock, 1, 8]]
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Public Subnet-1
  # creating public Subnet 2:
  PublicSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: !Select [1, !Cidr [!GetAtt myVPC.CidrBlock, 2, 8]]
      AvailabilityZone: !Select [1, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Public Subnet-2

  # creating public Subnet 3:
  PublicSubnetThree:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: !Select [2, !Cidr [!GetAtt myVPC.CidrBlock, 3, 8]]
      AvailabilityZone: !Select [2, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Public Subnet-3

  #setting up the Internet Gateway for myVPC
  InternetGatewayBlock:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Internet-Gateway

  #To attach the InternetGateway with myVPC created above
  InternetGatewayAttach:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGatewayBlock
      VpcId: !Ref myVPC

  # creating public Routing Table:
  PublicRoutingTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Public Routing Table

  # setting up public Route in routingTable
  PublicDefaultRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttach
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGatewayBlock
      RouteTableId: !Ref PublicRoutingTable

  #Attaching Public subnet 1 to the Public Routing Table
  PublicSubnet1RouteTableAttach:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRoutingTable
      SubnetId: !Ref PublicSubnetOne

  #Attaching Public subnet 2 to the Public Routing Table
  PublicSubnet2RouteTableAttach:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRoutingTable
      SubnetId: !Ref PublicSubnetTwo

  #Attaching Public subnet 3 to the Public Routing Table
  PublicSubnet3RouteTableAAttach:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRoutingTable
      SubnetId: !Ref PublicSubnetThree

  # creating private Subnet 1:
  PrivateSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: !Select [3, !Cidr [!GetAtt myVPC.CidrBlock, 4, 8]]
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Private Subnet-1

  # creating private Subnet 2:
  PrivateSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: !Select [4, !Cidr [!GetAtt myVPC.CidrBlock, 5, 8]]
      AvailabilityZone: !Select [1, !GetAZs ""]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Private Subnet-2

  # creating private Subnet 3:
  PrivateSubnetThree:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: !Select [5, !Cidr [!GetAtt myVPC.CidrBlock, 6, 8]]
      AvailabilityZone: !Select [2, !GetAZs ""]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Private Subnet-3

  # private Routing Table:
  PrivateRoutingTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Private Routing Table

  #Attaching Private subnet 1 to the Private Routing Table
  PrivateSubnet1RouteTableAttach:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRoutingTable
      SubnetId: !Ref PrivateSubnetOne

  #Attaching Private subnet 2 to the Private Routing Table
  PrivateSubnet2RouteTableAttach:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRoutingTable
      SubnetId: !Ref PrivateSubnetTwo

  #Attaching Private subnet 3 to the Private Routing Table
  PrivateSubnet3RouteTableAttach:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRoutingTable
      SubnetId: !Ref PrivateSubnetThree

  # S3 bucket with encryption and lifecycle
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        !Join [
          "",
          [
            "csye6225bucket-",
            !Select [0, !Split [-, !Select [2, !Split [/, !Ref AWS::StackId]]]],
            ".",
            !Ref EnvName,
            ".rakshakagadaluraju.me",
          ],
        ]
      PublicAccessBlockConfiguration:
        BlockPublicPolicy: true
        RestrictPublicBuckets: true
        BlockPublicAcls: true
        IgnorePublicAcls: true
      LifecycleConfiguration:
        Rules:
          - Id: MoveToStorageClassStandardToStandardIA
            Status: Enabled
            Transitions:
              - StorageClass: STANDARD_IA
                TransitionInDays: 30
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  # Create IAM Role for EC2 Instance with S3 Bucket Policy
  S3IamRole:
    Type: AWS::IAM::Role
    Properties:
      Description: "creating IAM role to access s3 from webapp to store data "
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - streams.metrics.cloudwatch.amazonaws.com
                - cloudwatch-crossaccount.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !Join ["", ["arn:aws:s3:::", !Ref S3Bucket]]
                  - !Join ["", ["arn:aws:s3:::", !Ref S3Bucket, "/*"]]
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy"
        - "arn:aws:iam::aws:policy/AmazonSNSFullAccess"
        - "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"

  # Create Iam Instance Profile
  S3IamInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    DependsOn: S3IamRole
    Properties:
      InstanceProfileName: !Sub '${AWS::StackName}-LaunchTemplateIAMInstanceProfile'
      Path: /
      Roles:
        - !Ref S3IamRole

  # Creating Subnet Group in the VPC for RDS
  RDSSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: !Sub RDS Subnet Groups
      SubnetIds:
        - !Ref PrivateSubnetOne
        - !Ref PrivateSubnetTwo
        - !Ref PrivateSubnetThree

  # Creating RDS Parameter Group for Postgres DB
  RDSParameterGroup:
    Type: "AWS::RDS::DBParameterGroup"
    Properties:
      Description: CloudFormation of RDS with postgres Parameter Group
      Family: postgres13
      Parameters:
        shared_preload_libraries: "pg_stat_statements"
        rds.force_ssl: 1
        log_statement: "all"

  # Create RDS Instance with MySQL 8.0 and RDS Subnet Group and Parameter Group
  RDSInstance:
    Type: AWS::RDS::DBInstance
    DependsOn:
      - RDSSecurityGroup
      - RDSEncryptedKey
      - RDSSubnetGroup
      - RDSParameterGroup
    Properties:
      Engine: postgres
      EngineVersion: 13
      DBInstanceClass: !Ref DBInstanceType
      MultiAZ: false
      DBName: !Ref DBName
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup
      MasterUserPassword: !Ref DBPassword
      DBSubnetGroupName: !Ref RDSSubnetGroup
      PubliclyAccessible: false
      DBParameterGroupName: !Ref RDSParameterGroup
      DeleteAutomatedBackups: true
      DBInstanceIdentifier: !Ref DBInstanceIdentifierName
      MasterUsername: !Ref DBUserName
      AllocatedStorage: 5
      BackupRetentionPeriod: !Ref DBBackupDays
      StorageEncrypted: true
      KmsKeyId: !Ref RDSEncryptedKey

  # Security Group for RDS with inbound rules from EC2 Instance Security Group
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: Ec2SecurityGroup
    Properties:
      GroupName: "DBSecurityGroup"
      GroupDescription: "Enabling only database port access"
      VpcId: !Ref myVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref Ec2SecurityGroup

  #setting up security group for
  Ec2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "ApplicationSecurityGroup"
      GroupDescription: "Application Security Group to enable SSH access via port 22,80,443 and 3300"
      VpcId: !Ref myVPC
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22

        - FromPort: 3300
          IpProtocol: tcp
          ToPort: 3300
          SourceSecurityGroupId: !Ref ELBSecurityGroup

      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Ec2SecurityGroup

  # Creating DynamoDB Table to store username and tokens
  myDynamoDB:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AWS::StackName}-DynamoDBTable"
      BillingMode: PROVISIONED
      AttributeDefinitions:
        - AttributeName: username
          AttributeType: S
      TimeToLiveSpecification:
        Enabled: true
        AttributeName: tokenttl
      KeySchema:
        - AttributeName: username
          KeyType: HASH
      ProvisionedThroughput:
        WriteCapacityUnits: 1
        ReadCapacityUnits: 1

  #Creating DynamoDB Table to store username and email verified status
  userDynamoDB:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "VerifyEmailDynamoDB"
      BillingMode: PROVISIONED
      AttributeDefinitions:
        - AttributeName: email
          AttributeType: S
      KeySchema:
        - AttributeName: email
          KeyType: HASH
      ProvisionedThroughput:
        WriteCapacityUnits: 20
        ReadCapacityUnits: 20


    # Create SNS Topic
  #creating a SNS topic for lambda function
  mySNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Sub "${AWS::StackName}-mySNSTopic"
      TopicName: !Sub "${AWS::StackName}-mySNSTopic"
      Subscription:
        - Endpoint: !GetAtt LambdaFunction.Arn
          Protocol: "lambda"

  # Creating SNS Topic Policy
  mySNSTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Version: "2008-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: "*"
            Action:
              - SNS:Publish
              - SNS:Subscribe

            Resource: !Ref mySNSTopic
            Condition:
              StringEquals:
                AWS:SourceOwner: !Ref AWS::AccountId
      Topics:
        - !Ref mySNSTopic

    # Create Lambda Function Permission for SNS Topic
  # setting up the lambda permissions
  mySNSTopicLambdaPermission:
    DependsOn: LambdaFunction
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaFunction
      Action: "lambda:InvokeFunction"
      Principal: "sns.amazonaws.com"
      SourceArn: !Ref mySNSTopic
  #setting up the lambda roles
  LambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"
        - "arn:aws:iam::aws:policy/AmazonSESFullAccess"

    # Create a Lambda Function
  # creating the lambda function
  LambdaFunction:
    Type: AWS::Lambda::Function
    DependsOn: userDynamoDB
    Properties:
      Description: !Sub "csye6225-Verify-Email-Lambda-function"
      FunctionName: !Sub "csye6225-Verify-Email-Lambda-function"
      Handler: index.handler
      Role: !GetAtt LambdaFunctionRole.Arn
      Runtime: nodejs14.x
      Timeout: 300
      MemorySize: 128
      Architectures:
        - x86_64
      PackageType: Zip
      Environment:
        Variables:
          VerifyEmailDynamoDB: !Ref userDynamoDB
          dynamoDbRegion: !Ref AWS::Region
          domainEnv: !Ref EnvName
      Code:
        ZipFile: |
          console.log('Loading Lambda function');
          //const ses = new aws.SES({});

          const AWS = require("aws-sdk");
          const ses = new AWS.SES();

          //setting the env variables from env file
          const VerifyEmailDynamoDB = process.env.VerifyEmailDynamoDB;
          const dynamoDbRegion = process.env.dynamoDbRegion || "us-east-1";
          const domainEnv = process.env.domainEnv || "demo";

          //Setting AWS region for ses
          AWS.config.update({ region: dynamoDbRegion });

          //Setting DB client for dynamo db
          const dynamoClient = new AWS.DynamoDB.DocumentClient({
              region: dynamoDbRegion,
            });

          //Setting up handler
          exports.handler = async (event, context, callback) => {

            const message = event.Records[0].Sns.Message;
            console.log("Message received from SNS:", message);

          //parse the event and store the event information
            const parsedData = JSON.parse(message);
            console.log("Data from parsed data:", parsedData);
            const messageType = parsedData.message_type;
            console.log("Message type type from parsed data:", messageType);
            const username = parsedData.username;
            console.log("username from parsed data:", username);
            const first_name = parsedData.first_name;
            console.log("First name from parsed data:", first_name);
            const last_name = parsedData.last_name;
            console.log("Last name from parsed data:", last_name);
            const userToken = parsedData.userToken;
            console.log("User token from parsed data:", userToken);

          //check if the email is already sent to user
            const emailStatus = await checkEmailStatus(
              dynamoClient,
              VerifyEmailDynamoDB,
              username
            );

          //if email is not sent to user send a new verification email using SES
            if (!emailStatus) {
              console.log("Sending verification email to the user: " + username);
              const params = {
                        Destination: {
                          ToAddresses: [username],
                        },
                        Message: {
                          Body: {
                            Html: {
                              Charset: "UTF-8",
                              Data: `<h3> Hello ${first_name} ${last_name},</h3>
                                    <h4>  Welcome to ${domainEnv}.rakshakagadaluraju.me </h4><br>
                                    <p>Please click the following link: <a href="https://${domainEnv}.rakshakagadaluraju.me/v1/verifyUser?email=${username}&token=${userToken}">Email verification link</a> or <br>
                                    paste the following link in the browser: https://${domainEnv}.rakshakagadaluraju.me/v1/verifyUser?email=${username}&token=${userToken} to verify your account with us.<br><br><br><br>
                                    Regards,<br>
                                    Team rakshakagadaluraju.me<br></p><br>`,
                            },
                          },
                          Subject: {
                            Charset: "UTF-8",
                            Data: `Email verification : for domain ${domainEnv}.rakshakagadaluraju.me`,
                          },
                        },
                        Source: `noreply@${domainEnv}.rakshakagadaluraju.me`,
                      };

              const data = await ses.sendEmail(params).promise();
              console.log(data);
              console.log("Verification email sent to new user through SES successfully");

              // update the email sent to user in dynamo DB
              await updateEmailStatusToDB(
                dynamoClient,
                VerifyEmailDynamoDB,
                username
              );
              console.log("Email updated to DynamoDB");
            } else {
              console.log(
                "Verification email already sent to user: " + username );
            }
            callback(null, "success");
          };

          //function to update verification email status to user
          const updateEmailStatusToDB = async (
              dynamoClient,
              VerifyEmailDynamoDB,
              username
            ) => {
              const params = {
                TableName: VerifyEmailDynamoDB,
                Item: {
                  email: username,
                },
              };
              const data = await dynamoClient.put(params).promise();
              console.log("Data:", data);
            };
            
          //function to check if verification email is sent to user
          const checkEmailStatus = async (
              dynamoClient,
              VerifyEmailDynamoDB,
              username
            ) => {
              const params = {
                TableName: VerifyEmailDynamoDB,
                Key: {
                  email: username,
                },
              };
              const data = await dynamoClient.get(params).promise();
              console.log("Data:", data);
              if (data.Item) {
                return true;
              } else {
                return false;
              }
            };

  # Create EC2 Launch Template
  ELBLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    DependsOn:
      - RDSInstance
      - S3Bucket
      - S3IamInstanceProfile
    Properties:
      LaunchTemplateName: !Sub 'asg_launch_config'
      LaunchTemplateData:
        ImageId: !Ref AmiID
        InstanceType: !Ref EC2InstanceType
        KeyName: aws
        IamInstanceProfile:
          Arn: !Sub 'arn:aws:iam::${AWS::AccountId}:instance-profile/${AWS::StackName}-LaunchTemplateIAMInstanceProfile'
        NetworkInterfaces: 
          - AssociatePublicIpAddress: true
            DeviceIndex: 0
            Groups:
              - !Ref Ec2SecurityGroup
            DeleteOnTermination: true
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              VolumeType: gp2
              DeleteOnTermination: true
              VolumeSize: 20
              Encrypted: true
              KmsKeyId: !Ref Ec2EncryptedKey

        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            DB_HOST=${RDSInstance.Endpoint.Address}
            DYNAMO_DB_TABLE_NAME=${myDynamoDB}
            AWS_REGION=${AWS::Region}
            SNS_TOPIC_ARN=${mySNSTopic}
            AWS_BUCKET_NAME=${S3Bucket}
            DB_USERNAME=${DBUserName}
            DB_PASSWORD=${DBPassword}
            DB_NAME=${DBName}
            sudo apt-get update
            sudo apt-get upgrade -y
            {
              echo "DB_HOST=$DB_HOST"
              echo "DB_PORT=5432"
              echo "AWS_BUCKET_NAME=$AWS_BUCKET_NAME"
              echo "DYNAMO_DB_TABLE_NAME=$DYNAMO_DB_TABLE_NAME"
              echo "SNS_TOPIC_ARN=$SNS_TOPIC_ARN"
              echo "AWS_REGION=$AWS_REGION"
              echo "DB_USERNAME=$DB_USERNAME"
              echo "DB_PASSWORD=$DB_PASSWORD"
              echo "DB_NAME=$DB_NAME"
              echo "PORT=3300"

              
            } >>/home/ubuntu/application.env
            echo "#############################Installing node application############################"
            cd /home/ubuntu || exit
            sudo chown ubuntu ./Routes/uploads
            sudo chmod -R 777 ./Routes/uploads
            sudo npm install
            pwd
            echo "Copying the service file to /etc/systemd/system/ to run the webapp automatically"
            sudo mv /home/ubuntu/webapp.service /etc/systemd/system/webapp.service
            echo "Enabling and Starting the node server service"
            sudo systemctl enable webapp.service
            sudo systemctl start webapp.service

            sudo systemctl restart amazon-cloudwatch-agent


            echo "#############################Installing node application############################"

  # Create Auto Scaling Group with Launch Template
  InstanceAutoScalingGroup:
     Type: AWS::AutoScaling::AutoScalingGroup
     DependsOn:
       - ELBLaunchTemplate
       - ELBTargetGroup
     Properties:
       AutoScalingGroupName: !Sub '${AWS::StackName}-auto-scaling-group'
       VPCZoneIdentifier:
         - !Ref PublicSubnetOne
         - !Ref PublicSubnetTwo
         - !Ref PublicSubnetThree
       AvailabilityZones:
         - us-east-1a
         - us-east-1b
         - us-east-1c
       LaunchTemplate:
         LaunchTemplateId: !Ref ELBLaunchTemplate
         Version: !GetAtt ELBLaunchTemplate.LatestVersionNumber
       MinSize: 1
       MaxSize: 2
       DesiredCapacity: 1
       Cooldown: '90'
       HealthCheckGracePeriod: 90
       HealthCheckType: EC2
       TargetGroupARNs:
         - !Ref ELBTargetGroup
       Tags:
         - Key: Application
           Value: WebApp
           PropagateAtLaunch: true
         - Key: Name
           Value: !Sub '${AWS::StackName}-auto-scaling-group'
           PropagateAtLaunch: true

  #Creating scaling up policy for Auto Scaling 
  AutoScalingUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      Cooldown: '60'
      ScalingAdjustment: '1'
      AutoScalingGroupName: !Ref InstanceAutoScalingGroup

  # Checking the condition to increase the number of instance
  ELBAvgCPUUp:
    Type: AWS::CloudWatch::Alarm
    Properties: 
      AlarmDescription: !Sub '${AWS::StackName}-Scale-up'
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 2
      Period: 60
      Threshold: 5.0
      Statistic: Average
      AlarmActions:
        - !Ref AutoScalingUpPolicy
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref InstanceAutoScalingGroup
          
  # Creating scaling down policy for Auto Scaling 
  AutoScalingDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      Cooldown: '60'
      AutoScalingGroupName: !Ref InstanceAutoScalingGroup
      ScalingAdjustment: '-1'

  # Checking the condition to decrease the number of instance
  ELBAvgCPUDown:
    Type: AWS::CloudWatch::Alarm
    Properties: 
      AlarmDescription: !Sub '${AWS::StackName}-AVGCPUDOWN'
      ComparisonOperator: LessThanThreshold
      EvaluationPeriods: 2
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Period: 60
      Statistic: Average
      Threshold: 3.0
      AlarmActions:
        - !Ref AutoScalingDownPolicy
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref InstanceAutoScalingGroup

  # Create Load Balancer
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub '${AWS::StackName}-LoadBalancer'
      Type: application
      IpAddressType: ipv4
      Scheme: internet-facing
      SecurityGroups:
        - !Ref ELBSecurityGroup
      Subnets:
        - !Ref PublicSubnetOne
        - !Ref PublicSubnetTwo
        - !Ref PublicSubnetThree
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
      Tags:
        - Key: Application
          Value: WebApp
        - Key: Name
          Value: !Sub '${AWS::StackName}-Load_Balancer'

  # Creating a Target Group for the Load Balancer
  ELBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${AWS::StackName}-ELB-TargetGroup'
      Port: 3300
      TargetType: instance
      IpAddressType: ipv4
      Protocol: HTTP
      VpcId: !Ref myVPC
      HealthCheckIntervalSeconds: 90
      HealthCheckPort: '3300'
      HealthCheckPath: '/healthz'
      HealthCheckProtocol: 'HTTP'
      HealthCheckTimeoutSeconds: 60
      UnhealthyThresholdCount: 2
      HealthyThresholdCount: 2
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-ELB-TargetGroup'
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '20'

  # Creating a security group for load balancer
  ELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for Load Balancer
      VpcId: !Ref myVPC
      SecurityGroupIngress:
        - IpProtocol: tcp 
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  # Create Listener for Load Balancer
  ELBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Join [ "", [ "arn:aws:acm:", !Ref AWS::Region, ":", !Ref AWS::AccountId, ":certificate/", !Ref SSLCertId ] ]
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ELBTargetGroup

  # Creating Route 53 A record  aliasing to the Load Balancer
  myDNSRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Join ['', [!Ref EnvName,'.rakshakagadaluraju.me.' ]]
      Type: A
      HostedZoneName: !Join ['', [!Ref EnvName,'.rakshakagadaluraju.me.' ]]
      AliasTarget:
        DNSName: !GetAtt 
          - LoadBalancer
          - DNSName
        EvaluateTargetHealth: false
        HostedZoneId: !GetAtt 
          - LoadBalancer
          - CanonicalHostedZoneID

  # Creating a KMS Key
  RDSEncryptedKey:
    Type: AWS::KMS::Key
    Properties:
      Description: !Sub KMS Key for RDS
      KeyPolicy:
        Version: "2012-10-17"
        Id: "kms-key-for-rds"      
        Statement:
          - Sid: "Allow IAM User permission for RDS Instance"
            Effect: Allow
            Principal:
              AWS: !Join 
                - ''
                - - 'arn:aws:iam::'
                  - !Ref 'AWS::AccountId'
                  - ':root'
            Action:
              - "kms:*"
            Resource: "*"
          - Sid: "Add service role"
            Effect: Allow
            Principal:
              AWS: !Join 
                - ''
                - - 'arn:aws:iam::'
                  - !Ref 'AWS::AccountId'
                  - ':role/aws-service-role/rds.amazonaws.com/AWSServiceRoleForRDS'
            Action:
              - "kms:*"
            Resource: "*"

      # HostedZoneName: !Join ["", [!Ref EnvName, ".rakshakagadaluraju.me."]]
      # RecordSets:
      #    - Name: !Join ['', [!Ref EnvName,'.rakshakagadaluraju.me.' ]]
      #      Type: A
      #      AliasTarget:
      #        DNSName: !GetAtt LoadBalancer.DNSName
      #        HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID
  

  # Creating a EBS KMS Key
  Ec2EncryptedKey:
      Type: AWS::KMS::Key
      Properties:
        Description: !Sub KMS Key for EBS
        KeyPolicy:
          Version: "2012-10-17"
          Id: "kms-key-for-ebs"      
          Statement:
            - Sid: "Allow IAM User permission for EBS"
              Effect: Allow
              Principal:
                AWS: 
                  - arn:aws:iam::326684742220:root
                  - arn:aws:iam::326684742220:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling
              Action:
                - "kms:*"
              Resource: "*"



   #EC2 instance
  # Ec2AppInstance:
  #   Type: "AWS::EC2::Instance"
  #   DependsOn:
  #     - RDSInstance
  #     - S3Bucket
  #     - S3IamInstanceProfile
  #   Properties:
  #     InstanceType: !Ref EC2InstanceType
  #     SecurityGroupIds:
  #       - !Ref Ec2SecurityGroup
  #     KeyName: aws
  #     ImageId: !Ref AmiID
  #     SubnetId: !Ref PublicSubnetOne
  #     BlockDeviceMappings:
  #       - DeviceName: /dev/sda1
  #         Ebs:
  #           VolumeType: gp2
  #           DeleteOnTermination: true
  #           VolumeSize: 50
  #     IamInstanceProfile: !Ref S3IamInstanceProfile
  #     UserData:
  #       Fn::Base64: !Sub |
  #         #!/bin/bash
  #         DB_HOST=${RDSInstance.Endpoint.Address}
  #         DYNAMO_DB_TABLE_NAME=${myDynamoDB}
  #         AWS_REGION=${AWS::Region}
  #         SNS_TOPIC_ARN=${mySNSTopic}
  #         AWS_BUCKET_NAME=${S3Bucket}
  #         DB_USERNAME=${DBUserName}
  #         DB_PASSWORD=${DBPassword}
  #         DB_NAME=${DBName}
  #         sudo apt-get update
  #         sudo apt-get upgrade -y
  #         {
  #           echo "DB_HOST=$DB_HOST"
  #           echo "DB_PORT=5432"
  #           echo "AWS_BUCKET_NAME=$AWS_BUCKET_NAME"
  #           echo "DYNAMO_DB_TABLE_NAME=$DYNAMO_DB_TABLE_NAME"
  #           echo "SNS_TOPIC_ARN=$SNS_TOPIC_ARN"
  #           echo "AWS_REGION=$AWS_REGION"
  #           echo "DB_USERNAME=$DB_USERNAME"
  #           echo "DB_PASSWORD=$DB_PASSWORD"
  #           echo "DB_NAME=$DB_NAME"
  #           echo "PORT=3300"

            
  #         } >>/home/ubuntu/application.env
  #         echo "#############################Installing node application############################"
  #         cd /home/ubuntu || exit
  #         sudo chown ubuntu ./Routes/uploads
  #         sudo chmod -R 777 ./Routes/uploads
  #         sudo npm install
  #         pwd
  #         echo "Copying the service file to /etc/systemd/system/ to run the webapp automatically"
  #         sudo mv /home/ubuntu/webapp.service /etc/systemd/system/webapp.service
  #         echo "Enabling and Starting the node server service"
  #         sudo systemctl enable webapp.service
  #         sudo systemctl start webapp.service

  #         sudo systemctl restart amazon-cloudwatch-agent


  #         echo "#############################Installing node application############################"

  #     Tags:
  #       - Key: Name
  #         Value: !Sub ${AWS::StackName}-Ec2Instance

# To display the outputs of the resources created during the could formation after building the stack
Outputs:
  VpcId:
    Description: My VPC ID
    Value: !Ref myVPC
    Export:
      Name: !Sub ${AWS::StackName}-VPC

  PublicSubnets:
    Description: List of all the public subnets created
    Value:
      !Join [
        ",",
        [!Ref PublicSubnetOne, !Ref PublicSubnetTwo, !Ref PublicSubnetThree],
      ]

  PublicSubnet1:
    Description: Public Subnet 1
    Value: !Ref PublicSubnetOne
    Export:
      Name: !Sub ${AWS::StackName}-Public-Subnet-1

  PublicSubnet2:
    Description: Public Subnet 2
    Value: !Ref PublicSubnetTwo
    Export:
      Name: !Sub ${AWS::StackName}-Public-Subnet-2

  PublicSubnet3:
    Description: Public Subnet 3
    Value: !Ref PublicSubnetThree
    Export:
      Name: !Sub ${AWS::StackName}-Public-Subnet-3
